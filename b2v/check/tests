Following are some tests defined for each stage:
1. Read Image
	- Write image back and diff should be 0.
1. Popout Boundaries: Assuming Zero indxing of rows and columns (0=Even)
	- Removing even rows and columns and then rebuilding the bitmap should give us the original bitmap.
	- For each white pixel, either up and down or right and left or left up and right down pixel must be different.
TEST1 = READ png image, print height, print width, print all pixels int values in 
		test_1_cpp.txt by cpp program.
	  = READ png image, print height, print width, print all pixels int values in 
	  	test_1_m.m by octave/matlab script.

TEST2 = print height, width and pixel values of popped out boundaries in different 
		different lines in test_2_cpp.txt by cpp program.
	  = print height, width and pixel values of popped out boundaries in different 
		different lines in test_2_m.txt by octave/matlab program.

TEST3 = convert back the coded image matrix back to the original popped out boundaries image
		using colour code and check if the two results are same.
		test_3_cpp.txt will be used for this

TEST4 = print control points coordinates in test_4_cpp.txt and compare with the control points detected
		by octave/matlab script printed in test_4_m.txt

TEST5 = prtint all lines in this pattern:
		totalLine = lineSeg + islandLineSeg
		number of vertices in each line with all the vertices coordinated printed.

TEST6 = print all curves coordinates in this pattern:
		number of curves
		forloop
			no. of pts in ith curve
			its start 
			its end
			all the points

TEST7 = print all regions' adjacent paths number only.

EVAL1 = output svg of dijoint paths only to see whether all lines are connected through control points without any gap
